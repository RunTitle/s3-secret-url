#!/usr/bin/env python
import os
import sys
import optparse
from datetime import datetime
try:
    from boto.s3.connection import S3Connection, Location
    from boto.s3.key import Key
    from boto.exception import S3ResponseError
except ImportError:
    sys.exit('Cannot find boto package; "pip install boto" maybe?')
#
#
# how to use program
usage = 'usage: %prog '\
        '[bucket] '


_cmd_parser = optparse.OptionParser(usage=usage)
_cmd_options, _cmd_args = _cmd_parser.parse_args()
opt, args, parser = _cmd_options, _cmd_args, _cmd_parser

#
#
# go no futher if no bucket was supplied
try:
    bucket = args[0]
except IndexError:
    print 'No bucket supplied'
    parser.print_help()
    sys.exit()


#
#
# connect and list the bucket
conn = S3Connection()
#
#
# if the bucket doesn't exist make it
try:
    bucket = conn.get_bucket(bucket, validate=True)
except S3ResponseError, e:
    print S3ResponseError
    print e
    sys.exit('Badtimes')


#
#
# get the things
things = [thing for thing in bucket.list()]

#
# prepare the message
msg = 'Which item would you like to generate a key for?\n'


for i, thing in enumerate(things):
    # human numbers please
    j = i + 1
    # make the message
    msg += '    \n[{0}] {1}'.format(j, thing.name)

msg += '\n\nEnter your choice: '

try:
    #
    # get the answer and validate
    while True:
        #
        # get the input
        choice = raw_input(msg)

        # validate it
        # was it an int?
        try:
            i = int(choice)
            # get the machine index number back
            i -= 1
        except ValueError:
            print '"{}" is not a valid choice'.format(choice)
            continue

        try:
            #
            # was it within the range
            key = things[i]
            # yes - break out the loop
            break
        except IndexError:
            print '"{}" is not a valid choice'.format(choice)


    #
    # get the number of seconds the link should be valid for
    while True:
        # ask how long in seconds the key should be valid for
        seconds = raw_input(
            'How long in seconds should the URL be valid for: ')
        # validate seconds
        try:
            s = int(seconds)
            #
            # make the secret key
            url = key.generate_url(expires_in=s)
            #
            # break out the loop
            break
        except ValueError:
            print '"{}" is not a valid choice'.format(seconds)
            continue

except (KeyboardInterrupt, SystemExit):
    sys.exit('\n\nCheerio dear fellow')
#
# echo the payload
print url
sys.exit()
